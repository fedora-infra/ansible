# {{ ansible_managed }}
add table ip filter
add chain ip filter INPUT { type filter hook input priority 0; policy accept; }
add chain ip filter FORWARD { type filter hook forward priority 0; policy accept; }
add chain ip filter OUTPUT { type filter hook output priority 0; policy accept; }

# allow ping and traceroute
add rule ip filter INPUT ip protocol icmp counter accept

# localhost is fine
add rule ip filter INPUT iifname "lo" counter accept

# Established connections allowed
add rule ip filter INPUT ct state related,established counter accept
add rule ip filter OUTPUT ct state related,established counter accept

# allow ssh - always
add rule ip filter INPUT ct state new tcp dport 22 counter accept

# for nrpe - allow it from nocs
add rule ip filter INPUT ip saddr 192.168.1.10  tcp dport 5666 counter accept
add rule ip filter INPUT ip saddr 192.168.1.166 tcp dport 5666 counter accept
# FIXME - this is the global nat-ip and we need the noc01-specific ip
add rule ip filter INPUT ip saddr 38.145.60.16  tcp dport 5666 counter accept
add rule ip filter INPUT ip saddr 38.145.60.15  tcp dport 5666 counter accept
add rule ip filter INPUT ip saddr 10.3.163.10   tcp dport 5666 counter accept
# zabbix01.stg
add rule ip filter INPUT tcp dport 10051 counter accept
add rule ip filter INPUT ip saddr 10.3.166.61 tcp dport 10050 counter accept


# if the host declares a fedmsg-enabled wsgi app, open ports for it
{% if wsgi_fedmsg_service is defined %}
{% for i in range(wsgi_procs * wsgi_threads) %}
add rule ip filter INPUT tcp dport 30{{ '%02d' % i }} counter accept
{% endfor %}
{% endif %}

# if the host/group defines incoming tcp_ports - allow them
{% for port in tcp_ports %}
add rule ip filter INPUT tcp dport {{ port }} counter accept
{% endfor %}

# if the host/group defines incoming udp_ports - allow them
{% for port in udp_ports %}
add rule ip filter INPUT udp dport {{ port }} counter accept
{% endfor %}

# if there are any proxy-only tcp_ports - allow them
{% if proxy_tcp_ports is defined %}
{% for port in proxy_tcp_ports %}
{% for proxy in groups['proxies_stg'] %}
{% if hostvars[proxy]['vpn'] %}
#!# FIXME: This test is the negation of the one in iptables.
add rule ip filter INPUT ip saddr {{ hostvars[proxy]['ansible_tun0']['ipv4']['address'] }} tcp dport {{ port }} counter accept
{% else %}
add rule ip filter INPUT ip saddr {{ hostvars[proxy]['ansible_eth0']['ipv4']['address'] }} tcp dport {{ port }} counter accept
{% endif %}
{% endfor %}
# No nagios
{% endfor %}
{% endif %}

# if there are custom rules - put them in as-is
{% if nft_custom_rules is defined %}
{% for rule in nft_custom_rules %}
{{ rule }}
{% endfor %}
{% endif %}

# otherwise kick everything out
add rule ip filter INPUT   counter reject with icmp type host-prohibited
add rule ip filter FORWARD counter reject with icmp type host-prohibited

# No nat rules
