---
- name: enable swap in fstab
  mount: name=none src=LABEL=swap
         fstype=swap opts=sw passno=0 dump=0
         state=present
  register: fstab_swap_entry
  tags: swap

- name: mount the swap
  shell: swapon -a
  when: fstab_swap_entry.changed
  tags: swap

- name: install the default profile script
  copy: src=profile.sh dest=/etc/profile.d/copr-hypervisor.sh
  tags: profile_scripts

- name: install libvirtd.conf
  copy: src="{{ files }}/virthost/libvirtd.conf" dest=/etc/libvirt/libvirtd.conf
  notify:
  - restart libvirtd
  tags:
  - libvirtd
  - config

- set_fact: image_pool_dir=/libvirt-images image_pool_name=images
  tags: libvirtd

- name: create libvirt image directory
  file: path={{ image_pool_dir }}
        owner=qemu group=qemu mode=0700
        state=directory
  tags: libvirtd

- name: mount libvirt image partition
  mount: name={{ image_pool_dir }} src='LABEL=vmvolumes'
         fstype=ext4 state=mounted
  tags: libvirtd

- name: correct selinux
  sefcontext:
    target: "{{ image_pool_dir }}(/.*)?"
    setype: virt_image_t
    state: present
  register: semanage_run
  tags: libvirtd

- name: restorecon
  shell: restorecon -irv "{{ image_pool_dir }}"
  when: semanage_run.changed
  tags: libvirtd

- name: check host-bridge in libvirt
  shell: virsh net-info host-bridge
  register: libvirt_bridge_exists
  failed_when: false
  changed_when: libvirt_bridge_exists.rc != 0
  tags: libvirtd

- name: copy host-bridge config file to host
  copy: src=libvirt-net-bridge.xml
        dest=/root/.tmp-ansible-file.xml
  when: libvirt_bridge_exists.changed
  tags: libvirtd

- name: define host-bridge in libvirt
  shell: |
    virsh net-define /root/.tmp-ansible-file.xml
    virsh net-start host-bridge
    virsh net-autostart host-bridge
  when: libvirt_bridge_exists.changed
  notify: restart libvirtd
  tags: libvirtd

- name: check if image pool exists
  shell: virsh pool-info "{{ image_pool_name }}"
  register: libvirt_pool_exists
  failed_when: false
  changed_when: libvirt_pool_exists.rc != 0
  tags: libvirtd

- name: copy image pool config file to host
  template: src=libvirt-pool-images.xml
            dest=/root/.tmp-ansible-file.xml
  when: libvirt_pool_exists.changed
  tags: libvirtd

- name: define image pool in libvirt
  shell: |
    virsh pool-define /root/.tmp-ansible-file.xml
    virsh pool-start "{{ image_pool_name }}"
    virsh pool-autostart "{{ image_pool_name }}"
  when: libvirt_pool_exists.changed
  notify: restart libvirtd
  tags: libvirtd

- name: allow copr user controlling libvirt
  ini_file:
    path: /usr/lib/systemd/system/libvirtd.socket
    section: Socket
    option: SocketGroup
    value: libvirt
    backup: yes
  notify:
    - reload systemd
    - restart libvirtd.socket
  tags: libvirtd

- name: create the copr user
  user: name=copr uid=11666

- name: assure that copr-be can ssh there as copr@...
  authorized_key: user=copr key="{{ item }}"
  with_file:
  - buildsys.pub

- name: add root keys for sysadmin-main and other allowed users
  action: authorized_key user=copr key={{ item }}
  with_lines:
  - "{{ auth_keys_from_fas}} @sysadmin-copr"
  tags: copr_admins

# todo: generate it's own key
- name: make sure hostA can ssh to hostB
  copy:
    src: "{{ private }}/files/copr/buildsys.priv"
    dest: /home/copr/.ssh/id_rsa
    owner: copr
    group: copr
    mode: 0600

- name: install libvirt packages
  package: name={{ item }} state=present
  with_items:
  - qemu-kvm
  - libvirt
  - virt-install

- name: add copr user to some virthosts that will run copr builders
  user: name=copr password_lock=true group=libvirt
