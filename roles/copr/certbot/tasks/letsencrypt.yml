---
- set_fact:
    le_source_path: /etc/letsencrypt
    le_backup_path: /root/letsencrypt-cert-backup
  tags:
    - certbot

- name: install certbot package
  package: name=certbot state=present
  tags:
    - certbot

- name: install certbot config
  template: src=certbot.j2 dest=/etc/sysconfig/certbot
            mode=0644
  tags:
    - certbot

- name: install certbot deploy script
  template: src={{ letsencrypt.predefined_deploy_script }}
            dest=/usr/libexec/auto-certbot-deploy
            mode=0755
  when: letsencrypt.predefined_deploy_script is defined
  tags:
    - certbot

- name: check whether we need to initialize letsencrypt first
  stat: path="/etc/letsencrypt/live/{{ item.key }}"
  register: le_stat_checks
  with_dict: "{{ letsencrypt.certificates }}"
  tags:
    - certbot

- name: restore certificates from the backup server
  synchronize:
    src: "{{ le_backup_path }}/{{ {{ letsencrypt.certificates|dictsort[0][0] }}"
    dest: "{{ le_source_path }}"
  delegate_to: "{{ letsencrypt.backup_to }}"
  tags:
    - certbot
  when:
    - letsencrypt.backup_to is defined
    - not le_stat_checks.results[0].stat.exists
  register: some_cert_restored

- name: initialize certbot configuration
  shell: |
      certbot certonly --standalone \
            -w {{ item.item.value.challenge_dir }} \
            -d {{ item.item.value.domains | join(' -d ') }} \
            --cert-name {{ item.item.key }} \
            -m {{ item.item.value.mail }} \
            --agree-tos \
            -n >> /tmp/call
  when:
    - not item.stat.exists
    - not some_cert_restored.changed
  with_items: "{{ le_stat_checks.results }}"
  tags:
    - certbot

- name: configure certbot to use webroot next time
  ini_file: dest="/etc/letsencrypt/renewal/{{ item.item.key }}.conf"
            section=renewalparams
            option=authenticator
            value=webroot
  with_items: "{{ le_stat_checks.results }}"
  tags:
    - certbot

- name: configure certbot to use webroot next time
  ini_file: dest="/etc/letsencrypt/renewal/{{ item.item.key }}.conf"
            section=renewalparams
            option=webroot_path
            value="{{ item.item.value.challenge_dir }}"
  with_items: "{{ le_stat_checks.results }}"
  tags:
    - certbot

- name: post init script
  shell: |
      /usr/libexec/auto-certbot-deploy \
            --init {{ item.item.key }}
  when:
    - letsencrypt.predefined_deploy_script is defined
    - not item.stat.exists
  with_items: "{{ le_stat_checks.results }}"
  with_items: "{{ le_stat_checks.results }}"
  tags:
    - certbot

- name: Automatize cert renewal
  service:
    name: certbot-renew.timer
    state: started
    enabled: yes
  tags:
    - certbot

# When we do 'systemctl restart', lighttpd is initially started as "root"
# process (when the config is loaded) and later it does setuid(lighttpd).
# So "restart" is just fine.   Though we also do 'killall -HUP lighttpd' in
# several occasions and then 'lighttpd' user needs to have the access.  See the
# following issues:
#   https://pagure.io/copr/copr/issue/2001 Resolves:
#   https://pagure.io/fedora-infrastructure/issue/10391
- name: allow lighttpd to step into certbots directories
  acl:
    path: "{{ item }}"
    entity: lighttpd
    etype: user
    permissions: --x
    state: present
  with_items:
    - /etc/letsencrypt/archive
    - /etc/letsencrypt/live
  when:
    - letsencrypt.predefined_deploy_script is defined
    - letsencrypt.predefined_deploy_script == 'lighttpd'
  tags:
    - certbot

- name: create the backup directory
  delegate_to: "{{ letsencrypt.backup_to }}"
  file:
    path: "{{ le_backup_path }}"
    owner: root
    group: root
    mode: 0700
    state: directory
  when:
    - letsencrypt.backup_to is defined
  tags:
    - certbot

- name: backup the letsencrypt data files to backup host
  synchronize:
    src: "{{ le_source_path }}"
    dest: "{{ le_backup_path }}/{{ item.key }}"
    mode: pull
  delegate_to: "{{ letsencrypt.backup_to }}"
  with_dict: "{{ letsencrypt.certificates }}"
  when:
    - letsencrypt.backup_to is defined
  tags:
    - certbot
